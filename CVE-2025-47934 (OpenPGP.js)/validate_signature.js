const openpgp = require('openpgp');
const process = require('process');
const fs = require('fs');

(async () => {
    // Generate using `generate_spoofed_message.py` or `extract_from_clearsign_and_spoof.py`
    const armoredMessage = fs.readFileSync(process.argv[2], {encoding: 'utf-8'});
    // The victim's public key
    const publicKeyArmored = fs.readFileSync(process.argv[3], {encoding: 'utf-8'});

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });
    const message = await openpgp.readMessage({ armoredMessage });
    const verificationResult = await openpgp.verify({ message, verificationKeys: publicKey });

    console.log(`Signed message data: ${verificationResult.data}`);
    const { verified, keyID } = verificationResult.signatures[0];
    try {
        await verified; // throws on invalid signature
        console.log(`Verified signature by key id ${keyID.toHex()}: ${await publicKey.getUserIDs()}`);
    } catch (e) {
        throw new Error(`Signature could not be verified: ${e.message}`);
    }
})();
